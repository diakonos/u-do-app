-- Create the friend_permissions table
CREATE TABLE public.friend_permissions (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    user_id UUID NOT NULL,
    friend_user_id UUID NOT NULL,
    create_tasks BOOLEAN DEFAULT FALSE NOT NULL,
    CONSTRAINT fk_user_id FOREIGN KEY (user_id) REFERENCES public.user_profiles (user_id) ON UPDATE CASCADE ON DELETE CASCADE,
    CONSTRAINT fk_friend_user_id FOREIGN KEY (friend_user_id) REFERENCES public.user_profiles (user_id) ON UPDATE CASCADE ON DELETE CASCADE,
    CONSTRAINT unique_friend_permission UNIQUE (user_id, friend_user_id)
);

-- Add RLS policies
ALTER TABLE public.friend_permissions ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own friend_permissions"
ON public.friend_permissions
FOR SELECT
TO authenticated
USING ((SELECT auth.uid() AS uid) = user_id);

CREATE POLICY "Users can insert their own friend_permissions"
ON public.friend_permissions
FOR INSERT
TO authenticated
WITH CHECK ((SELECT auth.uid() AS uid) = user_id);

CREATE POLICY "Users can update their own friend_permissions"
ON public.friend_permissions
FOR UPDATE
TO authenticated
USING ((SELECT auth.uid() AS uid) = user_id)
WITH CHECK ((SELECT auth.uid() AS uid) = user_id);

CREATE POLICY "Users can delete their own friend_permissions"
ON public.friend_permissions
FOR DELETE
TO authenticated
USING ((SELECT auth.uid() AS uid) = user_id);

-- Add indexes
CREATE INDEX idx_friend_permissions_user_id ON public.friend_permissions(user_id);
CREATE INDEX idx_friend_permissions_friend_user_id ON public.friend_permissions(friend_user_id);

-- Add comments to the table and columns
COMMENT ON TABLE public.friend_permissions IS 'Stores permissions granted by users to their friends.';
COMMENT ON COLUMN public.friend_permissions.id IS 'Primary key for the friend_permissions table.';
COMMENT ON COLUMN public.friend_permissions.created_at IS 'Timestamp of when the permission was created.';
COMMENT ON COLUMN public.friend_permissions.updated_at IS 'Timestamp of when the permission was last updated.'; -- Add comment for updated_at
COMMENT ON COLUMN public.friend_permissions.user_id IS 'ID of the user granting the permission.';
COMMENT ON COLUMN public.friend_permissions.friend_user_id IS 'ID of the friend receiving the permission.';
COMMENT ON COLUMN public.friend_permissions.create_tasks IS 'Boolean indicating if the friend can create tasks for the user.';

-- Trigger to update updated_at column
CREATE OR REPLACE FUNCTION public.update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_update_friend_permissions_updated_at
BEFORE UPDATE ON public.friend_permissions
FOR EACH ROW
EXECUTE FUNCTION public.update_updated_at_column();
