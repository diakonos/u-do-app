-- Create dashboard_configs table
CREATE TABLE public.dashboard_configs (
    "id" bigint generated by default as identity not null,
    "user_id" uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    "block_type" text NOT NULL,
    "value" text NOT NULL,
    "order" int NOT NULL,
    "created_at" timestamp with time zone DEFAULT now() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT now() NOT NULL,
    UNIQUE(user_id, "order")
);

-- Add comments to the table and columns
COMMENT ON TABLE public.dashboard_configs IS 'Stores user dashboard configuration blocks';
COMMENT ON COLUMN public.dashboard_configs.user_id IS 'References the user who owns this dashboard config block';
COMMENT ON COLUMN public.dashboard_configs.block_type IS 'Type of dashboard block';
COMMENT ON COLUMN public.dashboard_configs.value IS 'Configuration value for the block';
COMMENT ON COLUMN public.dashboard_configs."order" IS 'Display order of the block on dashboard';

-- Add RLS policies
ALTER TABLE public.dashboard_configs ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own dashboard configs" 
    ON public.dashboard_configs
    FOR SELECT
    USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own dashboard configs" 
    ON public.dashboard_configs
    FOR INSERT
    WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own dashboard configs" 
    ON public.dashboard_configs
    FOR UPDATE
    USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own dashboard configs" 
    ON public.dashboard_configs
    FOR DELETE
    USING (auth.uid() = user_id);

-- Create index for faster lookups by user_id
CREATE INDEX dashboard_configs_user_id_idx ON public.dashboard_configs(user_id);