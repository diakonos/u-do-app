create table "public"."friend_requests" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "requester_id" uuid not null,
    "recipient_id" uuid not null,
    "status" text not null check (status in ('pending', 'confirmed', 'rejected')),
    constraint friend_requests_pkey primary key (id),
    constraint friend_requests_requester_id_fkey foreign key (requester_id) references auth.users(id) on delete cascade,
    constraint friend_requests_recipient_id_fkey foreign key (recipient_id) references auth.users(id) on delete cascade,
    constraint unique_friend_request unique (requester_id, recipient_id)
);

-- Enable RLS
alter table "public"."friend_requests" enable row level security;

-- Grant access to authenticated users
grant all on table "public"."friend_requests" to authenticated;

-- RLS policies
-- Users can view friend requests they are involved in
create policy "Users can view their own friend requests"
on "public"."friend_requests"
for select
to authenticated
using (auth.uid() = requester_id or auth.uid() = recipient_id);

-- Users can only create friend requests where they are the requester
create policy "Users can create their own friend requests"
on "public"."friend_requests"
for insert
to authenticated
with check (auth.uid() = requester_id);

-- Users can only update friend requests they received
create policy "Recipients can update friend requests"
on "public"."friend_requests"
for update
to authenticated
using (auth.uid() = recipient_id);